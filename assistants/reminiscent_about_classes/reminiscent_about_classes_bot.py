from assistants.base_bot import BaseBot
from assistants.reminiscent_about_classes.settings import *
from databases.google_sheets_database import GoogleSheets

import asyncio
from aiogram import F
import datetime
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from tinydb import TinyDB, Query


class ReminiscentAboutClassesBot(BaseBot):
    def __init__(self):
        super().__init__(TOKEN)
        self.timers = dict()
        self.sheet = GoogleSheets(SCOPE, CREDS, TABLE_NAME, WORKSHEET).sheet

    def get_event_row_number(self, callback):
        with TinyDB(MESSAGES_BD, encoding='utf-8') as messages:
            for record_data in messages.all():
                if callback.message.message_id in record_data['messages']:
                    return record_data['row_number']

    def get_delta(self, callback):
        row_number = self.get_event_row_number(callback)
        response = self.sheet.get_all_records()[row_number]
        return (datetime.datetime.now() - datetime.datetime.strptime(response['–î–∞—Ç–∞'], '%d.%m.%Y %H:%S')).seconds

    def register_handlers(self):
        @self.dp.message(Command('start'))
        async def cmd_start(message: Message):
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text='üìñ GoogleSheets')],
                    [KeyboardButton(text='üìö –¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è')],
                    [KeyboardButton(text='üí∞–°—Ç–∞–≤–∫–∞, –∫—Ç–æ –ø—Ä–æ–µ–±—ë—Ç —Å—Ä–æ–∫–∏')]
                ],
                resize_keyboard=True,
            )
            await message.answer(
                text=f'–ü—Ä–∏–≤–µ—Ç! –ù–∞—à–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —É—á—ë–±—ã: {TELEGRAM_GROUP_LINK}',
                reply_markup=keyboard
            )

        @self.dp.message(F.text == 'üìñ GoogleSheets')
        async def with_puree(message: Message):
            await message.reply(
                text=GOOGLESHEETS_LINK
            )

        @self.dp.message(F.text == 'üìö –¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è')
        async def without_puree(message: Message):
            builder = InlineKeyboardBuilder(
                [[InlineKeyboardButton(text='‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', callback_data='subscribe'),
                  InlineKeyboardButton(text='‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data='unsubscribe')],
                 [InlineKeyboardButton(text='üîî –∑–∞ 0 –º–∏–Ω—É—Ç', callback_data='remind_in_start'),
                  InlineKeyboardButton(text='üîî –∑–∞ 15 –º–∏–Ω—É—Ç', callback_data='remind_in_fifteen_minutes'),
                  InlineKeyboardButton(text='üîî –∑–∞ 1 —á–∞—Å', callback_data='remind_in_an_hour')]
                 ]
            )
            for row_number, event in enumerate(self.sheet.get_all_records()):
                sending_message = await message.answer(
                    text=f"–ê–≤—Ç–æ—Ä: {event['–ê–≤—Ç–æ—Ä']}\n"
                         f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
                         f"–¢–∏–ø: {event['–¢–∏–ø']}\n"
                         f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
                         f"–î–∞—Ç–∞ –∏ –í—Ä–µ–º—è: {event['–î–∞—Ç–∞']}\n"
                         f"–ú–µ—Å—Ç–æ: {event['–ú–µ—Å—Ç–æ']}\n"
                         f"–£—á–∞—Å—Ç–Ω–∏–∫–∏: {event['–£—á–∞—Å—Ç–Ω–∏–∫–∏']}\n""",
                    reply_markup=builder.as_markup()
                )
                with TinyDB(MESSAGES_BD, encoding='utf-8') as messages:
                    record = messages.get(Query().row_number == row_number)
                    if record:
                        record['messages'].append(sending_message.message_id)
                        messages.upsert(record, Query().row_number == row_number)
                    else:
                        messages.insert({'row_number': row_number, 'messages': [sending_message.message_id]})

        @self.dp.callback_query(F.data == 'remind_in_an_hour')
        async def remind_in_an_hour(callback: CallbackQuery):
            await callback.message.answer(f'–ù–∞–ø–æ–º–Ω—é –∑–∞ 1 —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞!')
            delta = self.get_delta(callback) - 3600
            for _ in range(delta):
                await asyncio.sleep(1)
            await self.bot.forward_message(chat_id=callback.message.chat.id,
                                           from_chat_id=callback.message.chat.id,
                                           message_id=callback.message.message_id)
            await callback.message.answer(f'–°–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 1 —á–∞—Å!')

        @self.dp.callback_query(F.data == 'remind_in_fifteen_minutes')
        async def remind_in_fifteen_minutes(callback: CallbackQuery):
            await callback.message.answer(f'–ù–∞–ø–æ–º–Ω—é 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞!')
            delta = self.get_delta(callback) - 900
            for _ in range(delta):
                await asyncio.sleep(1)
            await self.bot.forward_message(chat_id=callback.message.chat.id,
                                           from_chat_id=callback.message.chat.id,
                                           message_id=callback.message.message_id)
            await callback.message.answer(f'–°–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç!')

        @self.dp.callback_query(F.data == 'remind_in_start')
        async def remind_in_start(callback: CallbackQuery):
            await callback.message.answer(f'–ù–∞–ø–æ–º–Ω—é –∫–æ–≥–¥–∞ –Ω–∞—á–Ω—ë—Ç—Å—è!')
            for _ in range(self.get_delta(callback) - 900):
                await asyncio.sleep(1)
            await self.bot.forward_message(chat_id=callback.message.chat.id,
                                           from_chat_id=callback.message.chat.id,
                                           message_id=callback.message.message_id)
            await callback.message.answer(f'–°–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!')

        @self.dp.callback_query(F.data == 'subscribe')
        async def subscribe(callback: CallbackQuery):
            with TinyDB(MESSAGES_BD, encoding='utf-8') as messages:
                for record_data in messages.all():
                    if callback.message.message_id in record_data['messages']:
                        row_number = record_data['row_number']

            response = self.sheet.get_all_records()[row_number]
            response['–£—á–∞—Å—Ç–Ω–∏–∫–∏'] += f'{callback.from_user.username}\n'
            self.sheet.update_acell(f'G{row_number + 2}', response['–£—á–∞—Å—Ç–Ω–∏–∫–∏'])
            await callback.message.answer(f'–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {response['–ù–∞–∑–≤–∞–Ω–∏–µ']}')

        @self.dp.callback_query(F.data == 'unsubscribe')
        async def unsubscribe(callback: CallbackQuery):
            with TinyDB(MESSAGES_BD, encoding='utf-8') as messages:
                for record_data in messages.all():
                    if callback.message.message_id in record_data['messages']:
                        row_number = record_data['row_number']

            response = self.sheet.get_all_records()[row_number]
            names = response['–£—á–∞—Å—Ç–Ω–∏–∫–∏'].split('\n')
            names.remove(callback.from_user.username)
            response['–£—á–∞—Å—Ç–Ω–∏–∫–∏'] = '\n'.join(names)
            self.sheet.update_acell(f'G{row_number + 2}', response['–£—á–∞—Å—Ç–Ω–∏–∫–∏'])
            await callback.message.answer(f'–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {response['–ù–∞–∑–≤–∞–Ω–∏–µ']}')

        @self.dp.message(F.text == 'üí∞–°—Ç–∞–≤–∫–∞, –∫—Ç–æ –ø—Ä–æ–µ–±—ë—Ç —Å—Ä–æ–∫–∏')
        async def place_bet(message: Message):
            await message.answer('–î–∞, –º–æ–π –≥–æ—Å–ø–∞–¥–∏–Ω...')
